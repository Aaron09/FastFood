package com.aarongreen.fastfood.DestinationActivityFiles;

import android.content.Context;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import com.aarongreen.fastfood.API_KEYS;
import com.aarongreen.fastfood.AWSCredentials;
import com.aarongreen.fastfood.MainActivityFiles.MainActivity;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility;
import com.amazonaws.services.s3.AmazonS3Client;
import com.google.gson.Gson;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;

/**
 * Created by AaronGreen on 4/6/17.
 *
 * This class makes an HTTP request to the Google Places API to get the JSON for the nearby
 * restaurants. As well as dumping new JSON to a file and uploading it to the AmazonS3 database
 * for caching.
 */

public class DestinationRetriever {

    public static final double DEFAULT_POSITION_VALUE = 0.0;
    public static final String FAILURE_MESSAGE = "Failed to retrieve data from source.";
    public static final String BASE_GOOGLE_URL =
            "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=";

    private static final String RESTAURANTS_STRING = "restaurant";
    private static final String BARS_STRING = "bar";
    private static final String DELIVERY_STRING = "meal_delivery";
    private static final int RADIUS = 50000; // in meters
    private static final String JSON_EXTENSION = ".json";
    private static final String URL_ERROR = "There was an error setting the JSON source URL.";
    private static final String JSON_BUCKET_NAME = "fastfood-json";
    private static final String BASE_S3_URL = "https://s3.amazonaws.com/fastfood-json/";

    private Context context;
    private String jsonURLString;
    private String baseURL;
    private double latitude;
    private double longitude;
    private String requestTypeString;
    private String googleHTTPURL;
    private String basePath;
    private AmazonS3Client amazonS3Client;

    /**
     * Initializes the object's properties, builds the base storage path, and initializes and signs
     * in the AmazonS3Client
     *
     * @param context the current context
     * @param baseURL the base URL of the local android external storage directory
     * @param latitude the current latitude of the user
     * @param longitude the current longitude of the user
     * @param requestType the type of request (Restaurant, Bar, or Delivery)
     */
    public DestinationRetriever(Context context, String baseURL, double latitude, double longitude,
                                MainActivity.REQUEST_TYPE requestType) {
        this.jsonURLString = null;
        this.context = context;
        this.baseURL = baseURL;
        this.latitude = latitude;
        this.longitude = longitude;
        this.requestTypeString = getRequestTypeString(requestType);
        this.googleHTTPURL = buildHTTPURL();
        this.basePath = Environment.getExternalStorageDirectory().getAbsolutePath();
        this.amazonS3Client = new AmazonS3Client(new BasicAWSCredentials(
                AWSCredentials.AWS_ACCESS_KEY, AWSCredentials.AWS_SECRET_KEY));
    }

    /**
     * Downloads the JSON and creates the DestinationCollection object using the JSON saved
     * to AmazonS3 if available, otherwise it makes the HTTP request
     *
     * @return a DestinationCollection object containing the JSON received in the API request
     */
    public DestinationCollection getNearbyDestinations() {
        double roundedLatitude = Destination.roundDistance(this.latitude);
        double roundedLongitude = Destination.roundDistance(this.longitude);
        final String JSON_FILE_NAME = basePath + "/" +
                (Double.toString(roundedLatitude) + roundedLongitude) + JSON_EXTENSION;
        final String AWS_PATH = (requestTypeString + roundedLatitude + roundedLongitude) + JSON_EXTENSION;

        boolean fromS3 = setDownloadURL(AWS_PATH);

        Log.d("URL", jsonURLString);

        // an error occurred while setting the URL for json download
        if (jsonURLString == null) {
            Toast.makeText(context, URL_ERROR, Toast.LENGTH_LONG).show();
            return null;
        }

        String jsonString = getJSONFromURL(jsonURLString);

        if (!fromS3) {
            dumpJSONToFile(JSON_FILE_NAME, jsonString);
            uploadJSONToDatabase(JSON_FILE_NAME, AWS_PATH);
        }

        Gson gson = new Gson();
        return gson.fromJson(jsonString, DestinationCollection.class);
    }


    /**
     *
     * @param urlString the URL in String form that contains the Destination data in JSON form
     * @return the JSON retrieved from the given URL as a String
     */
    private String getJSONFromURL(String urlString) {
        try {
            URL url = new URL(urlString);

            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));

            String jsonAsString = "";
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                jsonAsString += line;
            }
            bufferedReader.close();

            return jsonAsString;
        } catch (IOException e) {
            return "";
        }
    }

    /**
     * Uploads the file containing the JSON to the Amazon S3 database
     *
     * @param jsonFileName the name of the json file to be uploaded including the extension
     */
    private void uploadJSONToDatabase(String jsonFileName, String awsPath) {
        TransferUtility transferUtility = new TransferUtility(amazonS3Client, context);
        transferUtility.upload(JSON_BUCKET_NAME, awsPath, new File(jsonFileName));
    }

    /**
     * Writes the JSON received from the HTTP request to a file for future upload
     *
     * @param jsonFileName the name of the file to have json written to it
     * @param jsonString the json to be written
     */
    private void dumpJSONToFile(String jsonFileName, String jsonString) {
        try {
            FileWriter fileWriter = new FileWriter(jsonFileName);
            fileWriter.write(jsonString);
            fileWriter.close();
        } catch (IOException e) {
            // unable to write to the file
        }
    }

    /**
     * If the file exists in AmazonS3, we use that as our URL, otherwise we make an HTTP request
     * to the google places api
     *
     * @param awsPath the path of the JSON file in the Amazon S3 database
     * @return true if the URL is from S3, false otherwise
     */
    private boolean setDownloadURL(String awsPath) {
        Log.d("AWS", awsPath);
        if (amazonS3Client.doesObjectExist(JSON_BUCKET_NAME, awsPath)) {
            Log.d("EX", "Object exists");
            jsonURLString = BASE_S3_URL + awsPath;
            return true;
        } else {
            Log.d("NO", "Object does not exist");
            jsonURLString = googleHTTPURL;
            return false;
        }
    }

    /**
     * Uses the object's properties to construct the url to make the http request
     *
     * @return the complete url for making an http request to receive the JSON
     */
    private String buildHTTPURL() {
        return baseURL + latitude + "," + longitude +
                "&radius=" + RADIUS + "&type=" + requestTypeString + "&key=" +
                API_KEYS.GOOGLE_PLACES_KEY;
    }

    /**
     *
     * @return the string for the request type
     */
    private String getRequestTypeString(MainActivity.REQUEST_TYPE requestType) {
        String requestTypeString = null;
        switch (requestType) {
            case RESTAURANTS:
                requestTypeString = RESTAURANTS_STRING;
                break;
            case BARS:
                requestTypeString = BARS_STRING;
                break;
            case DELIVERY:
                requestTypeString = DELIVERY_STRING;
                break;
        }
        return requestTypeString;
    }
}
